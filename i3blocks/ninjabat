#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;

binmode(STDOUT, ":utf8");


# Get battery percent and status
my $acpi;
my $status;
my $percent;

open (ACPI, "acpi -b | grep 'Battery 0' |") or die;
$acpi = <ACPI>;
close(ACPI);

if ($acpi !~ /: (\w+), (\d+)%/) {
	die "$acpi\n";
}
$status = $1;
$percent = $2;

# Get battery temperature:

# Get chip temperature
my $temperature = -1;
open (SENSORS, "sensors -u BAT0-virtual-0 |") or die;
while (<SENSORS>) {
    if (/^\s+temp1_input:\s+[\+]*([\-]*\d+\.\d)/) {
        $temperature = $1;
        last;
    }
}
close(SENSORS);
$temperature eq -1 and die 'Cannot find temperature';

# Print:
if ($status eq 'Discharging') {
    printf "[%03.0f% ↓ %03.0f°C]\n", $percent, $temperature;
} elsif ($status eq 'Charging') {
	printf "[%03.0f% ↑ %03.0f°C]\n", $percent, $temperature;
} else {
    printf "[%03.0f% ↑ %03.0f°C]\n", $percent, $temperature;
}
exit(0);